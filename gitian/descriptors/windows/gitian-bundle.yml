---
name: "bundle-windows"
suites:
- "precise"
architectures:
- "i386"
packages:
- "unzip"
- "zip"
# Needed to compensate NSIS's failure of regenerating the PE-file checksum and
# proper padding.
- "python-pefile"
# These three packages are needed for assembling the HTTPS-Everywhere rules
# since 5.0.
- "python-lxml"
- "libxml2-utils"
- "sqlite3"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://github.com/moba/tbb-windows-installer.git"
  "dir": "tbb-windows-installer"
- "url": "https://git.torproject.org/tor-launcher.git"
  "dir": "tor-launcher"
- "url": "https://git.torproject.org/torbutton.git"
  "dir": "torbutton"
- "url": "https://git.torproject.org/https-everywhere.git"
  "dir": "https-everywhere"
- "url": "https://git.torproject.org/pluggable-transports/meek.git"
  "dir": "meek"
- "url": "https://github.com/googlei18n/noto-fonts.git"
  "dir": "noto-fonts"
- "url": "https://github.com/wolfcw/libfaketime"
  "dir": "faketime"
files:
# TODO: Can we use an env for this file+version??
- "tor-browser-win32-gbuilt.zip"
- "tor-win32-gbuilt.zip"
- "pluggable-transports-win32-gbuilt.zip"
- "torrc-defaults-appendix-windows"
- "bridge_prefs.js"
- "meek-http-helper-user.js"
- "windows-skeleton.zip"
- "win32-langpacks.zip"
- "noscript@noscript.net.xpi"
- "dzip.sh"
- "bare-version"
- "bundle.inputs"
- "versions"
- "mar-tools-win32.zip"
- "tbb-docs.zip"
- "pe_checksum_fix.py"
- "nsis-win32-utils.zip"
script: |
  INSTDIR="$HOME/install"
  source versions
  export LIBRARY_PATH="$INSTDIR/lib"
  export TZ=UTC
  export TORBROWSER_VERSION=`cat bare-version`
  export LC_ALL=C
  umask 0022

  # Building libfaketime
  cd faketime
  make
  DESTDIR="$INSTDIR/faketime" make install
  export LD_PRELOAD="$INSTDIR/faketime/usr/local/lib/faketime/libfaketime.so.1"
  export FAKETIME=$REFERENCE_DATETIME
  export FAKETIME_SKIP_CMDS="rsync"
  cd ..

  # Extract the MAR tools.
  unzip -d ~/build ~/build/mar-tools-win32.zip
  MARTOOLS=~/build/mar-tools
  # Extract nsis
  unzip -d $INSTDIR ~/build/nsis-win32-utils.zip
  export PATH=$INSTDIR/nsis/bin:$PATH
  #
  mkdir -p $OUTDIR/
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere-eff@eff.org
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.meek-http-helper/extensions
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/Caches
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Docs/sources
  #
  cd tor-launcher
  make clean
  make package
  # FIXME: Switch to re-dzip.sh here?
  mkdir pkg/tmp
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/tor-launcher@torproject.org.xpi .
  cd ../../../
  #
  cd torbutton
  mkdir -p pkg/tmp
  ./makexpi.sh
  # FIXME: Switch to re-dzip.sh here?
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/torbutton@torproject.org.xpi .
  cd ../../../
  #
  cd https-everywhere
  # XXX: Bloody hack to workaround a bug in HTTPS_E's git hash extraction in
  # makexpi.sh. See https://trac.torproject.org/projects/tor/ticket/10066
  # The solution there does not work for us as doing something like
  # |./makexpi.sh foo| to build tag |foo| is a) trying to download the sources
  # during build time (again) and b) broken due to a certificate error.
  rm -f .git/refs/heads/master
  ./makexpi.sh
  # Since 5.0.2 a .xpi for AMO is built, too. We don't need it.
  rm ./pkg/*-amo.xpi
  cp ./pkg/*.xpi ../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere@eff.org.xpi
  cd ..
  #
  cp *.xpi tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions
  cd tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions
  mv noscript@noscript.net.xpi {73a6fe31-595d-460b-a920-fcc0f8843232}.xpi
  cd https-everywhere-eff@eff.org
  unzip ../https-everywhere@eff.org.xpi
  rm ../https-everywhere@eff.org.xpi
  cd ~/build/
  #
  cd meek/firefox
  ~/build/dzip.sh ../meek-http-helper@bamsoftware.com.xpi .
  mv ../meek-http-helper@bamsoftware.com.xpi ../../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.meek-http-helper/extensions/meek-http-helper@bamsoftware.com.xpi
  cd ~/build/
  #
  # Install fonts.
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/fonts
  NOTO_FONTS_HINTED="NotoSansKhmer-Regular.ttf NotoSansLao-Regular.ttf NotoSansMyanmar-Regular.ttf"
  for fontfile in $NOTO_FONTS_HINTED; do
    cp "noto-fonts/hinted/$fontfile" tbb-windows-installer/"Tor Browser"/Browser/fonts/
  done
  NOTO_FONTS_UNHINTED="NotoSansBuginese-Regular.ttf NotoSansYi-Regular.ttf"
  for fontfile in $NOTO_FONTS_UNHINTED; do
    cp "noto-fonts/unhinted/$fontfile" tbb-windows-installer/"Tor Browser"/Browser/fonts/
  done
  #
  cd tbb-windows-installer/"Tor Browser"
  unzip ~/build/tor-browser-win32-gbuilt.zip
  cd Browser/TorBrowser
  unzip ~/build/tor-win32-gbuilt.zip
  unzip ~/build/windows-skeleton.zip
  unzip ~/build/tbb-docs.zip
  EXTOVERRIDESPATH=Data/Browser/profile.default/preferences/extension-overrides.js
  if [ $BUILD_PT_BUNDLES ]; then
    unzip ~/build/pluggable-transports-win32-gbuilt.zip
    cat ~/build/torrc-defaults-appendix-windows >> Data/Tor/torrc-defaults
    cat ~/build/bridge_prefs.js >> $EXTOVERRIDESPATH
    cat ~/build/meek-http-helper-user.js >> Data/Browser/profile.meek-http-helper/user.js
  fi
  # If not building a multi-lingual package, suppress the language prompt.
  if [ "z$MULTI_LINGUAL" != "z1" ]; then
    echo 'pref("extensions.torlauncher.prompt_for_locale", false);' >> $EXTOVERRIDESPATH
    echo 'pref("intl.locale.matchOS", false);' >> $EXTOVERRIDESPATH
  fi
  cd ../../..
  #
  # Copy reproducibility info
  cp ../versions "Tor Browser"/Browser/TorBrowser/Docs/sources/
  cp ../bundle.inputs "Tor Browser"/Browser/TorBrowser/Docs/sources/

  #
  pushd "Tor Browser"/Browser/browser/
  # For the proper search engines in our language packs
  unzip omni.ja chrome/en-US/locale/browser/searchplugins*
  mv chrome/en-US/locale/browser/searchplugins ~/build
  rm -rf chrome
  unzip omni.ja defaults/preferences/000-tor-browser.js
  cp defaults/preferences/000-tor-browser.js ~/build/
  # Set the locale bundle.
  echo "pref(\"general.useragent.locale\", \"en-US\");" >> defaults/preferences/000-tor-browser.js
  zip -Xm omni.ja defaults/preferences/000-tor-browser.js
  rm -rf defaults
  popd
  #

  unzip ../win32-langpacks.zip
  WIN32_LOCALES="$BUNDLE_LOCALES $BUNDLE_LOCALES_WIN32"
  # Prepare our language packs for using the proper search engines. See bug
  # 18915 for more details.
  for LANG in $WIN32_LOCALES
  do
    xpi=win32-langpacks/$LANG.xpi
    unzip -d prep_$LANG $xpi
    search_plugins_path=prep_$LANG/browser/chrome/$LANG/locale/browser
    rm -rf $search_plugins_path/searchplugins
    cp -rf ~/build/searchplugins $search_plugins_path
    rm $xpi
    cd prep_$LANG
    ~/build/dzip.sh ../$xpi .
    cd ..
    rm -rf prep_$LANG
  done
  PKG_LOCALE="en-US"
  # If we are building a multi-lingual package, add all of the language packs
  # and use "ALL" in the package name and as the locale for update purposes.
  if [ "z$MULTI_LINGUAL" = "z1" ]; then
    PKG_LOCALE="ALL"
    pushd win32-langpacks
    for LANG in $WIN32_LOCALES
    do
      xpi=$LANG.xpi
      cp $xpi ../"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi
    done
    popd

    # Set the update.locale to ALL (it is used to replace %LOCALE% within
    # app.update.url).
    pushd "Tor Browser"/Browser/
    echo $PKG_LOCALE > update.locale
    zip -Xm omni.ja update.locale
    popd
  fi

  # Recreate precomplete file (needs to be accurate for full MAR updates).
  pushd "Tor Browser"/Browser/
  rm -f precomplete
  python $MARTOOLS/createprecomplete.py
  popd
  #
  # Create full MAR file and installer.
  # Strangely, mbsdiff is linked as mbsdiff.exe even though it is a host
  # (e.g., Linux) executable.
  MAR_FILE=tor-browser-win32-${TORBROWSER_VERSION}_${PKG_LOCALE}.mar
  MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff.exe $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE "Tor Browser"/Browser
  makensis torbrowser.nsi
  # Working around NSIS braindamage
  mv torbrowser-install.exe torbrowser-install-tmp.exe
  python ~/build/pe_checksum_fix.py
  mv torbrowser-install-tmp2.exe torbrowser-install.exe
  rm torbrowser-install-tmp.exe
  mv torbrowser-install.exe $OUTDIR/torbrowser-install-${TORBROWSER_VERSION}_${PKG_LOCALE}.exe

  # If we did not create a multi-lingual package above, create a package for
  # each locale.
  if [ "z$MULTI_LINGUAL" != "z1" ]; then
    for LANG in $WIN32_LOCALES
    do
      xpi=win32-langpacks/$LANG.xpi
      cp $xpi "Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi

      pushd "Tor Browser"/Browser/browser/
      mkdir -p defaults/preferences
      cp ~/build/000-tor-browser.js defaults/preferences/
      echo "pref(\"general.useragent.locale\", \"$LANG\");" >> defaults/preferences/000-tor-browser.js
      zip -Xm omni.ja defaults/preferences/000-tor-browser.js
      rm -rf defaults
      popd

      # Set the update.locale (it is used to replace %LOCALE% within
      # app.update.url), remove the en-US spellchecking dictionary, and
      # recreate precomplete file (needs to be accurate for full MAR updates).
      pushd "Tor Browser"/Browser/
      echo "$LANG" > update.locale
      zip -Xm omni.ja update.locale
      rm -rf dictionaries
      rm -f precomplete
      python $MARTOOLS/createprecomplete.py
      popd

      # Create full MAR file and installer for this locale.
      # Strangely, mbsdiff is linked as mbsdiff.exe even though it is a host
      # (e.g., Linux) executable.
      MAR_FILE=tor-browser-win32-${TORBROWSER_VERSION}_$LANG.mar
      MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff.exe $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE "Tor Browser"/Browser
      makensis torbrowser.nsi
      # Working around NSIS braindamage
      mv torbrowser-install.exe torbrowser-install-tmp.exe
      python ~/build/pe_checksum_fix.py
      mv torbrowser-install-tmp2.exe torbrowser-install.exe
      rm torbrowser-install-tmp.exe
      mv torbrowser-install.exe $OUTDIR/torbrowser-install-${TORBROWSER_VERSION}_$LANG.exe
      rm "Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi
    done
  fi
