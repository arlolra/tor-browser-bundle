name: "torbrowser-windows"
suites:
- "precise"
architectures:
- "i386"
packages:
- "unzip"
- "autoconf2.13"
- "yasm"
- "zip"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://git.torproject.org/tor-browser.git"
  "dir": "tor-browser"
files:
- "gcc-linux32-precise-utils.zip"
- "mingw-w64-win32-utils.zip"
- "re-dzip.sh"
- "dzip.sh"
- "gcclibs-win32-utils.zip"
- "i686-w64-mingw32-gcc"
- "i686-w64-mingw32-g++"
- "i686-w64-mingw32-ld"
- "msvcr100.dll"
- "versions"
script: |
  INSTDIR="$HOME/install"
  source versions
  export REFERENCE_DATETIME
  export TZ=UTC
  export LC_ALL=C
  umask 0022
  #
  mkdir -p $INSTDIR/Browser/
  mkdir -p $OUTDIR/
  unzip -d $INSTDIR gcc-linux32-precise-utils.zip
  # We need a link to our GCC, otherwise the system cc gets used which points to
  # /usr/bin/gcc.
  ln -s gcc $INSTDIR/gcc/bin/cc
  unzip -d $INSTDIR mingw-w64-win32-utils.zip
  unzip -d $INSTDIR gcclibs-win32-utils.zip
  # Make sure our custom mingw and GCC (as host compiler) get used.
  export LD_LIBRARY_PATH=$INSTDIR/gcc/lib
  export PATH=$INSTDIR/mingw-w64/bin:$INSTDIR/gcc/bin:$PATH

  # We don't want to link against msvcrt.dll due to bug 9084.
  i686-w64-mingw32-g++ -dumpspecs > msvcr100.spec
  sed 's/msvcrt/msvcr100/' -i msvcr100.spec

  # Building the browser
  cd tor-browser
  mv .mozconfig-mingw .mozconfig
  # FIXME
  # Ideally, using LDFLAGS (and e.g. DLLFLAGS for NSS) would be enough to get
  # all Firefox libraries linked against msvcr100. Alas, this does not hold for
  # NSPR. Without patching it we get a "missing entry points for _strcmpi in
  # msvcr100.dll". Now, this should be fixed in rev>=6179 as the def file there
  # contains a proper patch according to the mingw-w64 developers.
  # However, even with this patch the _strcmpi issue is still popping up,
  # probably due to a bug in our current linking setup. The small patch below
  # is therefore just a workaround which should get fixed but is at least
  # justified as the signature of _strcmpi and _stricmp is the same, see:
  # http://msdn.microsoft.com/en-us/library/k59z8dwe.aspx.
  sed 's/strcmpi/stricmp/' -i nsprpub/pr/src/linking/prlink.c
  export HOST_LDFLAGS=" "
  export LDFLAGS="-specs=/home/ubuntu/build/msvcr100.spec"
  # Our flags don't get passed to NSS. We need to do that manually using an
  # obscure one.
  export DLLFLAGS="-specs=/home/ubuntu/build/msvcr100.spec"
  # .git and the src takes up a lot of useless space, and we need the space to build
  #git archive HEAD | tar -x -C $OUTDIR/src
  rm -rf .git
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  rm -f configure
  rm -f js/src/configure
  export MOZ_BUILD_DATE=$(date -d "$REFERENCE_DATETIME" +%Y%m%d%H%M%S)
  make -f client.mk configure CONFIGURE_ARGS="--with-tor-browser-version=${TORBROWSER_VERSION} --enable-update-channel=${TORBROWSER_UPDATE_CHANNEL} --enable-bundled-fonts"
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  #
  mkdir -p ~/build/bin/
  cp ~/build/i686* ~/build/bin/
  export PATH=~/build/bin:$PATH
  #
  make $MAKEOPTS -f client.mk build
  #
  make -C obj-* package INNER_MAKE_PACKAGE=true
  cp -a obj-*/dist/firefox/* $INSTDIR/Browser/
  cp -a ~/build/msvcr100.dll $INSTDIR/Browser/
  cp -a $INSTDIR/gcclibs/libssp-0.dll $INSTDIR/Browser/

  # Make MAR-based update tools available for use during the bundle phase.
  MARTOOLS=~/build/mar-tools
  mkdir -p $MARTOOLS
  cp -p config/createprecomplete.py $MARTOOLS/
  cp -p tools/update-packaging/*.sh $MARTOOLS/
  cp -p obj-*/dist/host/bin/mar $MARTOOLS/
  cp -p obj-*/dist/host/bin/mbsdiff $MARTOOLS/
  cd ~/build
  ~/build/dzip.sh mar-tools-win32.zip mar-tools
  cp mar-tools-win32.zip $OUTDIR/

  # Making the .ja files deterministic and grabbing the results
  cd $INSTDIR
  ~/build/re-dzip.sh Browser/omni.ja
  ~/build/re-dzip.sh Browser/webapprt/omni.ja
  ~/build/re-dzip.sh Browser/browser/omni.ja
  ~/build/dzip.sh tor-browser-win32-gbuilt.zip Browser

  cp tor-browser-win32-gbuilt.zip $OUTDIR
