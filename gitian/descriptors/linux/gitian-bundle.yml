---
name: "bundle-linux"
distro: "debian"
suites:
- "wheezy"
architectures:
- "i386"
- "amd64"
packages:
- "unzip"
- "zip"
# These three packages are needed for assembling the HTTPS-Everywhere rules
# since 5.0.
- "libxslt1.1"
- "libxml2-utils"
- "sqlite3"
- "python-lxml"
- "rsync"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://git.torproject.org/tor-launcher.git"
  "dir": "tor-launcher"
- "url": "https://git.torproject.org/torbutton.git"
  "dir": "torbutton"
- "url": "https://git.torproject.org/https-everywhere.git"
  "dir": "https-everywhere"
- "url": "https://git.torproject.org/pluggable-transports/meek.git"
  "dir": "meek"
- "url": "https://github.com/googlei18n/noto-fonts.git"
  "dir": "noto-fonts"
files:
- "tor-browser-linux32-gbuilt.zip"
- "tor-browser-linux64-gbuilt.zip"
- "tor-linux32-gbuilt.zip"
- "tor-linux64-gbuilt.zip"
- "pluggable-transports-linux32-gbuilt.zip"
- "pluggable-transports-linux64-gbuilt.zip"
- "torrc-defaults-appendix-linux"
- "bridge_prefs.js"
- "meek-http-helper-user.js"
- "relativelink-src.zip"
- "linux-skeleton.zip"
- "linux-langpacks.zip"
- "noscript@noscript.net.xpi"
- "dzip.sh"
- "dtar.sh"
- "bare-version"
- "bundle.inputs"
- "versions"
- "mar-tools-linux32.zip"
- "mar-tools-linux64.zip"
- "tbb-docs.zip"
- "STIXv1.1.1-latex.zip"
- "NotoEmoji-Regular.ttf"
- "NotoSansJP-Regular.otf"
- "NotoSansKR-Regular.otf"
- "NotoSansSC-Regular.otf"
- "NotoSansTC-Regular.otf"
script: |
  INSTDIR="$HOME/install"
  source versions
  export REFERENCE_DATETIME
  export LIBRARY_PATH="$INSTDIR/lib"
  export TZ=UTC
  export LC_ALL=C
  export TORBROWSER_VERSION=`cat bare-version`
  umask 0022

  mkdir -p $OUTDIR/
  # When we build with MULTI_LINGUAL=1, the browser will be packaged inside a
  # directory named tor-browser (instead of tor-browser_en-US). Therefore we
  # stage everything under tor-browser-stage to avoid a conflict.
  TB_STAGE_DIR=tor-browser-stage
  mkdir -p ${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere-eff@eff.org
  mkdir -p ${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.meek-http-helper/extensions
  mkdir -p ${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/Caches
  mkdir -p ${TB_STAGE_DIR}/Browser/TorBrowser/Docs/sources/
  #
  # Extract the MAR tools.
  unzip -d ~/build ~/build/mar-tools-linux${GBUILD_BITS}.zip
  MARTOOLS=~/build/mar-tools
  #
  cd tor-launcher
  make clean
  make package
  # FIXME: Switch to re-dzip.sh here?
  mkdir pkg/tmp
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions/tor-launcher@torproject.org.xpi .
  cd ../../../
  #
  cd torbutton
  mkdir -p pkg
  ./makexpi.sh
  # FIXME: Switch to re-dzip.sh here?
  mkdir pkg/tmp
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions/torbutton@torproject.org.xpi .
  cd ../../../
  #
  cd https-everywhere
  # XXX: Bloody hack to workaround a bug in HTTPS_E's git hash extraction in
  # makexpi.sh. See https://trac.torproject.org/projects/tor/ticket/10066
  # The solution there does not work for us as doing something like
  # |./makexpi.sh foo| to build tag |foo| is a) trying to download the sources
  # during build time (again) and b) broken due to a certificate error.
  rm -f .git/refs/heads/master
  ./makexpi.sh
  # Since 5.0.2 a .xpi for AMO is built, too. We don't need it.
  rm ./pkg/*-amo.xpi
  cp pkg/*.xpi ../${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere@eff.org.xpi
  cd ..
  #
  cp *.xpi ${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions/
  cd ${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions
  mv noscript@noscript.net.xpi {73a6fe31-595d-460b-a920-fcc0f8843232}.xpi
  cd https-everywhere-eff@eff.org/
  unzip ../https-everywhere@eff.org.xpi
  rm ../https-everywhere@eff.org.xpi
  cd ~/build
  #
  cd meek/firefox
  ~/build/dzip.sh ../../${TB_STAGE_DIR}/Browser/TorBrowser/Data/Browser/profile.meek-http-helper/extensions/meek-http-helper@bamsoftware.com.xpi .
  cd ~/build/
  #
  # Install fonts.
  mkdir -p ${TB_STAGE_DIR}/Browser/fonts
  NOTO_FONTS_HINTED="Arimo-Regular.ttf Arimo-Bold.ttf Arimo-Italic.ttf Arimo-BoldItalic.ttf Cousine-Regular.ttf Tinos-Regular.ttf Tinos-Bold.ttf Tinos-Italic.ttf Tinos-BoldItalic.ttf NotoNaskhArabic-Regular.ttf NotoSansArmenian-Regular.ttf NotoSansBengali-Regular.ttf NotoSansDevanagari-Regular.ttf NotoSansEthiopic-Regular.ttf NotoSansGeorgian-Regular.ttf NotoSansGujarati-Regular.ttf NotoSansGurmukhi-Regular.ttf NotoSansHebrew-Regular.ttf NotoSansKannada-Regular.ttf NotoSansKhmer-Regular.ttf NotoSansLao-Regular.ttf NotoSansMalayalam-Regular.ttf NotoSansMyanmar-Regular.ttf NotoSansOriya-Regular.ttf NotoSansSinhala-Regular.ttf NotoSansTamil-Regular.ttf NotoSansTelugu-Regular.ttf NotoSansThaana-Regular.ttf NotoSansThai-Regular.ttf NotoSansTibetan-Regular.ttf NotoSerifArmenian-Regular.ttf NotoSerifKhmer-Regular.ttf NotoSerifLao-Regular.ttf NotoSerifThai-Regular.ttf"
  for fontfile in $NOTO_FONTS_HINTED; do
    cp "noto-fonts/hinted/$fontfile" ${TB_STAGE_DIR}/Browser/fonts/
  done
  NOTO_FONTS_UNHINTED="NotoSansCanadianAboriginal-Regular.ttf NotoSansBuginese-Regular.ttf NotoSansCherokee-Regular.ttf NotoSansMongolian-Regular.ttf NotoSansYi-Regular.ttf"
  for fontfile in $NOTO_FONTS_UNHINTED; do
    cp "noto-fonts/unhinted/$fontfile" ${TB_STAGE_DIR}/Browser/fonts/
  done
  unzip -o STIXv1.1.1-latex.zip -d STIX
  cp "STIX/Fonts/fonts/opentype/public/stix/STIXMath-Regular.otf" ${TB_STAGE_DIR}/Browser/fonts/
  cp NotoEmoji-Regular.ttf ${TB_STAGE_DIR}/Browser/fonts/
  cp {NotoSansJP-Regular.otf,NotoSansKR-Regular.otf,NotoSansSC-Regular.otf,NotoSansTC-Regular.otf} ${TB_STAGE_DIR}/Browser/fonts/
  #
  unzip relativelink-src.zip
  cp RelativeLink/* ${TB_STAGE_DIR}/Browser/
  #
  cd ${TB_STAGE_DIR}
  cp Browser/start-tor-browser.desktop ./
  unzip ~/build/tor-browser-linux$GBUILD_BITS-gbuilt.zip
  cd Browser/TorBrowser
  unzip ~/build/tor-linux$GBUILD_BITS-gbuilt.zip
  unzip ~/build/linux-skeleton.zip
  unzip ~/build/tbb-docs.zip
  EXTOVERRIDESPATH=Data/Browser/profile.default/preferences/extension-overrides.js
  if [ $BUILD_PT_BUNDLES ]; then
    unzip ~/build/pluggable-transports-linux$GBUILD_BITS-gbuilt.zip
    cat ~/build/torrc-defaults-appendix-linux >> Data/Tor/torrc-defaults
    cat ~/build/bridge_prefs.js >> $EXTOVERRIDESPATH
    cat ~/build/meek-http-helper-user.js >> Data/Browser/profile.meek-http-helper/user.js
  fi
  # If not building a multi-lingual package, suppress the language prompt.
  if [ "z$MULTI_LINGUAL" != "z1" ]; then
    echo 'pref("extensions.torlauncher.prompt_for_locale", false);' >> $EXTOVERRIDESPATH
    echo 'pref("intl.locale.matchOS", false);' >> $EXTOVERRIDESPATH
  fi
  chmod 700 Data/Browser
  chmod 700 Data/Tor
  cd ../../..
  #
  # Copy reproducibility info
  cp versions ${TB_STAGE_DIR}/Browser/TorBrowser/Docs/sources/
  cp bundle.inputs ${TB_STAGE_DIR}/Browser/TorBrowser/Docs/sources/

  # Create en-US or multi-lingual package.
  PKG_LOCALE="en-US"
  PKG_DIR="tor-browser_${PKG_LOCALE}"
  # If we are building a multi-lingual package, use "ALL" in the package name
  # and as the locale for update purposes. We do not include "ALL" in the name
  # of the directory that is inside the package (in other words, users will
  # not see tor-browser_ALL after they install Tor Browser).
  if [ "z$MULTI_LINGUAL" = "z1" ]; then
    PKG_LOCALE="ALL"
    PKG_DIR="tor-browser"
  fi
  cp -a ${TB_STAGE_DIR} ${PKG_DIR}
  #
  pushd ${PKG_DIR}/Browser/browser/
  # For the proper search engines in our language packs
  unzip omni.ja chrome/en-US/locale/browser/searchplugins*
  mv chrome/en-US/locale/browser/searchplugins ~/build
  rm -rf chrome/en-US
  unzip omni.ja defaults/preferences/000-tor-browser.js
  cp defaults/preferences/000-tor-browser.js ~/build/
  # Set the locale of the bundle.
  echo "pref(\"general.useragent.locale\", \"en-US\");" >> defaults/preferences/000-tor-browser.js
  touch --date="$REFERENCE_DATETIME" defaults/preferences/000-tor-browser.js
  zip -Xm omni.ja defaults/preferences/000-tor-browser.js
  rm -rf defaults
  popd
  #
  unzip linux-langpacks.zip
  LINUX_LOCALES="$BUNDLE_LOCALES $BUNDLE_LOCALES_LINUX"
  # Prepare our language packs for using the proper search engines. See bug
  # 18915 for more details.
  for LANG in $LINUX_LOCALES
  do
    xpi=linux-langpacks/$LANG.xpi
    unzip -d prep_$LANG $xpi
    search_plugins_path=prep_$LANG/browser/chrome/$LANG/locale/browser
    rm -rf $search_plugins_path/searchplugins
    cp -rf ~/build/searchplugins $search_plugins_path
    rm $xpi
    cd prep_$LANG
    ~/build/dzip.sh ../$xpi .
    cd ..
    rm -rf prep_$LANG
  done
  # If we are building a multi-lingual package, add all of the language packs.
  if [ "z$MULTI_LINGUAL" = "z1" ]; then
    pushd linux-langpacks
    for LANG in $LINUX_LOCALES
    do
      xpi=$LANG.xpi
      cp $xpi ../${PKG_DIR}/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi
    done
    popd

    # Set the update.locale (it is used to replace %LOCALE% within
    # app.update.url).
    pushd ${PKG_DIR}/Browser/
    echo ${PKG_LOCALE} > update.locale
    touch --date="$REFERENCE_DATETIME" update.locale
    zip -Xm omni.ja update.locale
    popd
  fi

  # Recreate precomplete file (needs to be accurate for full MAR updates).
  pushd ${PKG_DIR}/Browser
  rm -f precomplete
  python $MARTOOLS/createprecomplete.py
  popd
  #
  # Create full MAR file and compressed package.
  MAR_FILE=tor-browser-linux${GBUILD_BITS}-${TORBROWSER_VERSION}_${PKG_LOCALE}.mar
  MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE ${PKG_DIR}/Browser
  ~/build/dtar.sh $OUTDIR/tor-browser-linux${GBUILD_BITS}-${TORBROWSER_VERSION}_${PKG_LOCALE}.tar.xz ${PKG_DIR}
  rm -rf ${PKG_DIR}
  #
  # If we did not create a multi-lingual package above, create a package for
  # each locale.
  if [ "z$MULTI_LINGUAL" != "z1" ]; then
    for LANG in $LINUX_LOCALES
    do
      xpi=linux-langpacks/$LANG.xpi
      cp -a ${TB_STAGE_DIR} tor-browser_$LANG
      cp $xpi tor-browser_$LANG/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi

      pushd tor-browser_$LANG/Browser/browser/
      mkdir -p defaults/preferences
      cp ~/build/000-tor-browser.js defaults/preferences/
      # Set the locale of the bundle.
      echo "pref(\"general.useragent.locale\", \"$LANG\");" >> defaults/preferences/000-tor-browser.js
      touch --date="$REFERENCE_DATETIME" defaults/preferences/000-tor-browser.js
      zip -Xm omni.ja defaults/preferences/000-tor-browser.js
      rm -rf defaults
      popd

      # Set the update.locale (it is used to replace %LOCALE% within
      # app.update.url), remove the en-US spellchecking dictionary, and
      # recreate precomplete file (needs to be accurate for full MAR updates).
      pushd tor-browser_$LANG/Browser/
      echo "$LANG" > update.locale
      touch --date="$REFERENCE_DATETIME" update.locale
      zip -Xm omni.ja update.locale
      rm -rf dictionaries
      rm -f precomplete
      python $MARTOOLS/createprecomplete.py
      popd

      # Create full MAR file and compressed package for this locale.
      MAR_FILE=tor-browser-linux${GBUILD_BITS}-${TORBROWSER_VERSION}_$LANG.mar
      MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE tor-browser_$LANG/Browser
      ~/build/dtar.sh $OUTDIR/tor-browser-linux${GBUILD_BITS}-${TORBROWSER_VERSION}_$LANG.tar.xz tor-browser_$LANG

      rm -rf tor-browser_$LANG
    done
  fi
