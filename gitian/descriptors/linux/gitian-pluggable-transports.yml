---
name: "pluggable-transports-linux"
distro: "debian"
suites:
- "wheezy"
architectures:
- "i386"
- "amd64"
packages:
- "faketime"
- "unzip"
- "python-setuptools"
- "python-dev"
# Needed by M2Crypto
- "swig"
- "zip"
- "hardening-wrapper"
- "pkg-config"
- "gtk2.0-dev"
- "libpci-dev"
- "libdbus-1-dev"
- "libgnome-keyring-dev"
- "libnss3-dev"
- "libffi-dev"
- "libasound2-dev"
- "libpulse-dev"
- "libudev-dev"
- "libgl1-mesa-dev"
- "default-jre-headless"
- "default-jdk"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://git.torproject.org/pluggable-transports/pyptlib.git"
  "dir": "pyptlib"
- "url": "https://git.torproject.org/pluggable-transports/obfsproxy.git"
  "dir": "obfsproxy"
- "url": "https://github.com/kpdyer/libfte.git"
  "dir": "libfte"
- "url": "https://github.com/kpdyer/fteproxy.git"
  "dir": "fteproxy"
- "url": "https://github.com/habnabit/txsocksx.git"
  "dir": "txsocksx"
- "url": "https://git.torproject.org/pluggable-transports/goptlib.git"
  "dir": "goptlib"
- "url": "https://git.torproject.org/pluggable-transports/meek.git"
  "dir": "meek"
- "url": "https://github.com/agl/ed25519.git"
  "dir": "ed25519"
- "url": "https://github.com/dchest/siphash.git"
  "dir": "siphash"
- "url": "https://go.googlesource.com/crypto"
  "dir": "goxcrypto"
- "url": "https://go.googlesource.com/net"
  "dir": "goxnet"
- "url": "https://git.torproject.org/pluggable-transports/obfs4.git"
  "dir": "obfs4"
- "url": "https://chromium.googlesource.com/chromium/tools/depot_tools.git"
  "dir": "depot_tools"
- "url": "https://github.com/keroserene/go-webrtc.git"
  "dir": "go-webrtc"
- "url": "https://git.torproject.org/pluggable-transports/snowflake.git"
  "dir": "snowflake"
files:
- "pycrypto.tar.gz"
- "argparse.tar.gz"
- "pyyaml.tar.gz"
- "zope.interface.zip"
- "twisted.tar.bz2"
- "parsley.tar.gz"
- "go14.tar.gz"
- "go.tar.gz"
- "dzip.sh"
- "gmp-linux32-utils.zip"
- "gmp-linux64-utils.zip"
- "openssl-linux32-utils.zip"
- "openssl-linux64-utils.zip"
- "binutils-linux32-utils.zip"
- "binutils-linux64-utils.zip"
- "gcc-linux32-utils.zip"
- "gcc-linux64-utils.zip"
- "webrtc"
script: |
  INSTDIR="$HOME/install"
  PTDIR="$INSTDIR/Tor/PluggableTransports"
  mkdir -p $PTDIR
  export FAKETIME=$REFERENCE_DATETIME
  export TZ=UTC
  export LC_ALL=C
  export PYTHON=python2
  umask 0022

  # Config options for hardening-wrapper
  export DEB_BUILD_HARDENING=1
  export DEB_BUILD_HARDENING_STACKPROTECTOR=1
  export DEB_BUILD_HARDENING_FORTIFY=1
  export DEB_BUILD_HARDENING_FORMAT=1
  export DEB_BUILD_HARDENING_PIE=1

  unzip -d $INSTDIR gmp-linux$GBUILD_BITS-utils.zip
  unzip -d $INSTDIR openssl-linux$GBUILD_BITS-utils.zip
  # FTE only needs libgmp.so.10 and no libgmpxx anymore.
  cp $INSTDIR/gmp/lib/libgmp.so.10 $INSTDIR/Tor

  # Preparing Binutils and GCC for webrtc
  unzip -d $INSTDIR binutils-linux$GBUILD_BITS-utils.zip
  # Make sure gold is used with the hardening wrapper for full RELRO, see
  # #13031.
  cd $INSTDIR/binutils/bin
  rm ld
  cp /usr/bin/hardened-ld ./
  mv ld.gold ld.gold.real
  ln -sf hardened-ld ld.gold
  ln -sf ld.gold ld
  cd ~/build
  unzip -d $INSTDIR gcc-linux$GBUILD_BITS-utils.zip
  # Make sure we use the hardening wrapper when compiling Tor Browser.
  cd $INSTDIR/gcc/bin
  cp /usr/bin/hardened-cc ./
  mv gcc gcc.real
  mv c++ c++.real
  ln -sf hardened-cc gcc
  ln -sf hardened-cc c++
  cd ~/build
  export PATH=$INSTDIR/gcc/bin:$INSTDIR/binutils/bin:$PATH
  ARCH=""
  if [ $GBUILD_BITS == "64" ];
  then
    ARCH="64"
  fi
  # Make sure our GCC gets properly used.
  export LD_LIBRARY_PATH=$INSTDIR/gcc/lib$ARCH

  # Building go 1.4.x
  # This is needed to bootstrap the go that we actually use
  # https://golang.org/doc/install/source#go14
  tar xvf go14.tar.gz --transform='s,^go\>,go1.4,'
  cd go1.4/src
  # Disable cgo to avoid conflicts with newer GCC. cgo is not needed for the bootstrap go.
  # https://github.com/golang/go/issues/13114#issuecomment-186922245
  CGO_ENABLED=0 ./make.bash
  cd ../..
  export GOROOT_BOOTSTRAP="$PWD/go1.4"

  # Building go
  # http://golang.org/doc/install/source#environment
  export GOPATH="$HOME/go"
  tar xvf go.tar.gz
  cd go/src
  ./make.bash
  cd ../..
  export PATH="$PATH:$PWD/go/bin"

  # Building pyptlib
  cd pyptlib
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/pyptlib $PTDIR/
  cd ..

  # Building PyCrypto
  tar xzf pycrypto.tar.gz
  cd pycrypto-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/Crypto $PTDIR/
  cd ..

  # Building argparse
  tar xzf argparse.tar.gz
  cd argparse-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/argparse.py $PTDIR/
  cd ..

  # Building Zope interfaces
  unzip zope.interface.zip
  cd zope.interface-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/zope $PTDIR/
  cd ..

  # Building PyYAML
  tar xzf pyyaml.tar.gz
  cd PyYAML-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/yaml $PTDIR/
  cd ..

  # Building Twisted
  tar xjf twisted.tar.bz2
  cd Twisted-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/twisted $PTDIR/
  cd ..

  # Building Parsley
  tar xzf parsley.tar.gz
  cd Parsley-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/parsley.py $PTDIR/
  cp -a build/ometa $PTDIR/
  cp -a build/terml $PTDIR/
  cd ..

  # Building txsocksx
  cd txsocksx
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  # Let's pretend we have the setup dependency already as we don't want to get
  # it downloaded during building. Just pretending and thus avoiding another
  # dependency should be fine here as txsocksx catches the exception due to
  # missing __version__ and __sha__ .
  mkdir vcversioner-1.14.1.1-py2.7.egg
  $PYTHON setup.py build --build-lib build
  cp -a build/txsocksx $PTDIR/
  cd ..

  # Building obfsproxy
  cd obfsproxy
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  $PYTHON setup.py build --build-lib build
  cp -a build/obfsproxy $PTDIR/
  cp -a bin/obfsproxy $PTDIR/obfsproxy.bin
  mkdir -p $INSTDIR/Docs/Obfsproxy
  cp -a {LICENSE,README} $INSTDIR/Docs/Obfsproxy
  cd ..

  # Building libfte
  cd libfte
  ln -s $INSTDIR/gmp thirdparty/gmp
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  make
  cp -ra fte $PTDIR/
  mkdir -p $INSTDIR/Docs/libfte
  cp -a {LICENSE,README.md} $INSTDIR/Docs/libfte
  cp -a thirdparty/re2/LICENSE $INSTDIR/Docs/libfte/LICENSE.re2
  cd ..

  # Building fteproxy
  cd fteproxy
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  cp -a bin/fteproxy $PTDIR/fteproxy.bin
  cp -ra fteproxy $PTDIR/
  mkdir -p $INSTDIR/Docs/fteproxy
  cp -a {COPYING,README.md} $INSTDIR/Docs/fteproxy
  cd ..

  # Building goptlib
  cd goptlib
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/git.torproject.org/pluggable-transports"
  ln -sf "$PWD" "$GOPATH/src/git.torproject.org/pluggable-transports/goptlib.git"
  go install git.torproject.org/pluggable-transports/goptlib.git
  cd ..

  # Building meek
  cd meek
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  cd meek-client
  go build -ldflags '-s'
  cp -a meek-client $PTDIR
  cd ..
  cd meek-client-torbrowser
  go build -ldflags '-s'
  cp -a meek-client-torbrowser $PTDIR
  cd ..
  mkdir -p $INSTDIR/Docs/meek
  cp -a README doc/*.1 $INSTDIR/Docs/meek
  cd ..

  # Building go ed25519
  cd ed25519
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/agl/"
  ln -sf "$PWD" "$GOPATH/src/github.com/agl/ed25519"
  go install github.com/agl/ed25519/extra25519
  cd ..

  # Building go siphash
  cd siphash
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/dchest/"
  ln -sf "$PWD" "$GOPATH/src/github.com/dchest/siphash"
  go install github.com/dchest/siphash
  cd ..

  # Building golang.org/x/crypto (obfs4proxy > 0.0.3 || Go >= 1.4)
  cd goxcrypto
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/golang.org/x/"
  ln -sf "$PWD" "$GOPATH/src/golang.org/x/crypto"
  go install golang.org/x/crypto/curve25519
  go install golang.org/x/crypto/hkdf
  go install golang.org/x/crypto/nacl/secretbox
  cd ..

  # Building golang.org/x/net (obfs4proxy > 0.0.4)
  cd goxnet
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/golang.org/x/"
  ln -sf "$PWD" "$GOPATH/src/golang.org/x/net"
  go install golang.org/x/net/proxy
  cd ..

  # Building obfs4proxy
  cd obfs4
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/git.torproject.org/pluggable-transports"
  ln -sf "$PWD" "$GOPATH/src/git.torproject.org/pluggable-transports/obfs4.git"
  cd obfs4proxy
  go build -ldflags '-s'
  cp -a obfs4proxy $PTDIR
  cd ../..

  # Setting up depot_tools
  # https://dev.chromium.org/developers/how-tos/install-depot-tools
  export PATH="$PATH:$PWD/depot_tools"
  # Disable automatic updating.
  export DEPOT_TOOLS_UPDATE=0

  # Building webrtc
  export GYP_CROSSCOMPILE=1
  export GYP_DEFINES="OS=linux target_arch=$(if [ $GBUILD_BITS = 32 ]; then echo ia32; else echo x64; fi) use_sysroot=0 linux_use_bundled_gold=0 linux_use_gold_flags=0 linux_use_bundled_binutils=0 use_gconf=0 clang=0 host_clang=0 use_x11=0 werror="
  cd webrtc/src
  JAVA_HOME=/usr/lib/jvm/default-java webrtc/build/gyp_webrtc
  # "ninja" is part of depot_tools.
  ninja -C out/Release
  # https://github.com/keroserene/go-webrtc/issues/23#issuecomment-175312648
  # dump_syms_regtest.o is actually an executable, not an object file. If not
  # excluded, it results in the error:
  # libwebrtc-linux-386-magic.a(dump_syms_regtest.o): unsupported ELF file type 2
  ar crs libwebrtc-magic.a $(find . -name '*.o' -not -name '*.main.o' -not -name 'dump_syms_regtest.o')
  cd ../..

  # Building go-webrtc
  cd go-webrtc
  # Delete the prebuilt webrtc library.
  rm -rf include/ lib/
  # Copy the webrtc headers.
  INCLUDE_DIR="$PWD/include"
  (cd ../webrtc/src && for h in $(find talk/ webrtc/ -type f -name '*.h'); do
    mkdir -p "$INCLUDE_DIR/$(dirname $h)"
    cp -f "$h" "$INCLUDE_DIR/$h"
  done)
  mkdir -p lib
  cp -f ../webrtc/src/libwebrtc-magic.a lib/libwebrtc-linux-$(if [ $GBUILD_BITS = 32 ]; then echo 386; else echo amd64; fi)-magic.a
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/keroserene/"
  ln -sf "$PWD" "$GOPATH/src/github.com/keroserene/go-webrtc"
  # The go-webrtc package sets _GLIBCXX_USE_CXX11_ABI=0 for compatibility with
  # the prebuilt libwebrtc-magic.a libraries. Since we build our own
  # libwebrtc-magic.a with the C++11 ABI, we have to undo that setting here,
  # using CGO_CXXFLAGS.
  CGO_CXXFLAGS=-D_GLIBCXX_USE_CXX11_ABI=1 go install github.com/keroserene/go-webrtc
  cd ..

  # Building snowflake
  cd snowflake
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  cd client
  go build -ldflags '-s'
  cp -a client $PTDIR/snowflake-client
  cd ..
  mkdir -p $INSTDIR/Docs/snowflake
  cp -a README.md LICENSE $INSTDIR/Docs/snowflake
  cd ..

  # Grabbing the results and making sure timestamps don't spoil them
  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1
  cd $INSTDIR
  ~/build/dzip.sh pluggable-transports-linux$GBUILD_BITS-gbuilt.zip Tor/ Docs/
  cp pluggable-transports-linux$GBUILD_BITS-gbuilt.zip $OUTDIR/
