---
name: "pluggable-transports-mac"
distro: "debian"
suites:
- "wheezy"
architectures:
- "i386"
packages:
- "unzip"
- "pkg-config"
- "python-setuptools"
- "python-dev"
- "zip"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://git.torproject.org/pluggable-transports/pyptlib.git"
  "dir": "pyptlib"
- "url": "https://git.torproject.org/pluggable-transports/obfsproxy.git"
  "dir": "obfsproxy"
- "url": "https://github.com/kpdyer/libfte.git"
  "dir": "libfte"
- "url": "https://github.com/kpdyer/fteproxy.git"
  "dir": "fteproxy"
- "url": "https://github.com/habnabit/txsocksx.git"
  "dir": "txsocksx"
- "url": "https://git.torproject.org/pluggable-transports/goptlib.git"
  "dir": "goptlib"
- "url": "https://git.torproject.org/pluggable-transports/meek.git"
  "dir": "meek"
- "url": "https://github.com/agl/ed25519.git"
  "dir": "ed25519"
- "url": "https://github.com/dchest/siphash.git"
  "dir": "siphash"
- "url": "https://go.googlesource.com/crypto"
  "dir": "goxcrypto"
- "url": "https://go.googlesource.com/net"
  "dir": "goxnet"
- "url": "https://git.torproject.org/pluggable-transports/obfs4.git"
  "dir": "obfs4"
- "url": "https://github.com/keroserene/go-webrtc.git"
  "dir": "go-webrtc"
- "url": "https://git.torproject.org/pluggable-transports/snowflake.git"
  "dir": "snowflake"
- "url": "https://github.com/dchest/uniuri.git"
  "dir": "uniuri"
files:
- "versions"
- "pycrypto.tar.gz"
- "argparse.tar.gz"
- "pyyaml.tar.gz"
- "zope.interface.zip"
- "twisted.tar.bz2"
- "parsley.tar.gz"
- "go14.tar.gz"
- "go.tar.gz"
- "apple-uni-sdk-10.6_20110407-0.flosoft1_i386.deb"
- "MacOSX10.7.sdk.tar.gz"
- "multiarch-darwin11-cctools127.2-gcc42-5666.3-llvmgcc42-2336.1-Linux-120724.tar.xz"
- "clang-linux32-wheezy-utils.zip"
- "libcxx-linux64-wheezy-utils.zip"
- "webrtc-mac64-gbuilt.zip"
- "dzip.sh"
- "gmp-mac64-utils.zip"
- "openssl-mac64-utils.zip"
script: |
  INSTDIR="$HOME/install"
  source versions
  TBDIR="$INSTDIR/TorBrowserBundle.app"
  if [ "z$DATA_OUTSIDE_APP_DIR" = "z1" ]; then
    PTDIR="$TBDIR/Contents/MacOS/Tor/PluggableTransports"
    DOCSDIR="$TBDIR/Contents/Resources/TorBrowser/Docs"
    TORBINDIR="$TBDIR/Contents/MacOS/Tor"
    # TODO: Fix packaging of fte so it can be included. See bug 18495.
    INCLUDE_FTE=0
  else
    PTDIR="$TBDIR/TorBrowser/Tor/PluggableTransports"
    DOCSDIR="$TBDIR/TorBrowser/Docs"
    TORBINDIR="$TBDIR/TorBrowser/Tor"
    INCLUDE_FTE=1
  fi
  export LIBRARY_PATH="$INSTDIR/lib"
  export REFERENCE_DATETIME
  export TZ=UTC
  export LC_ALL=C
  umask 0022
  #
  mkdir -p $PTDIR/
  mkdir -p $OUTDIR/
  #
  # dpkg requires sbin directories in the PATH
  export PATH="/usr/sbin:/sbin:$PATH"
  sudo dpkg -i *.deb
  tar xaf multiarch-darwin*tar.xz
  # The 10.7 SDK is needed for Go: https://bugs.torproject.org/20023#comment:6
  tar xaf MacOSX10.7.sdk.tar.gz
  export PATH="$PATH:$HOME/build/apple-osx/bin/"
  # For gmp, need to trick it so it knows we're doing a 64 bit build
  for i in ~/build/apple-osx/bin/i686-apple-darwin11-*; do j=`echo $i | sed 's/i686/x86_64/'`; ln -s $i $j; done;
  # "go link" expects to find a program called "dsymutil" exactly.
  ln -s i686-apple-darwin11-dsymutil ~/build/apple-osx/bin/dsymutil
  if [ "z$INCLUDE_FTE" = "z1" ]; then
    unzip -d $INSTDIR gmp-mac64-utils.zip
    unzip -d $INSTDIR openssl-mac64-utils.zip
    # FTE only needs libgmp.10.dylib and no libgmpxx anymore.
    cp $INSTDIR/gmp/lib/libgmp.10.dylib $TORBINDIR/
    FTE_EXTRA_CFLAGS=" -I$INSTDIR/gmp/include -L$INSTDIR/gmp/lib"
  else
    FTE_EXTRA_CFLAGS=""
  fi

  #
  export AR=$HOME/build/apple-osx/bin/i686-apple-darwin11-ar
  export CC=$HOME/build/apple-osx/bin/i686-apple-darwin11-gcc
  export CXX=$HOME/build/apple-osx/bin/i686-apple-darwin11-g++
  # http://bugs.python.org/issue9437
  export LDSHARED="$CC -pthread -shared"

  # Building go 1.4.x
  # This is needed to bootstrap the go that we actually use
  # https://golang.org/doc/install/source#go14
  tar xvf go14.tar.gz --transform='s,^go\>,go1.4,'
  cd go1.4/src
  # Disable cgo to avoid conflicts with newer GCC. cgo is not needed for the bootstrap go.
  # https://github.com/golang/go/issues/13114#issuecomment-186922245
  # Disable CC etc. that are set up for cross builds.
  CGO_ENABLED=0 CC= CFLAGS= LDFLAGS= ./make.bash
  cd ../..
  export GOROOT_BOOTSTRAP="$PWD/go1.4"

  # Building go
  # Create a cc-for-target script that closes over CC, CFLAGS, and LDFLAGS.
  # Go's CC_FOR_TARGET only allows a command name, not a command with arguments.
  # https://github.com/golang/go/issues/15457
  CC_FOR_TARGET="$(pwd)/cc-for-target"
  echo "#!/bin/sh" > "$CC_FOR_TARGET"
  echo "exec $CC $CFLAGS $LDFLAGS -isysroot $HOME/build/MacOSX10.7.sdk -std=gnu99 \"\$@\"" >> "$CC_FOR_TARGET"
  chmod +x "$CC_FOR_TARGET"
  # http://golang.org/doc/install/source#environment
  export GOPATH="$HOME/go"
  export GOOS=darwin
  export GOARCH=386
  tar xvf go.tar.gz
  cd go/src
  # Remove a preprocessor directive that causes problems when building with the 10.7 SDK.
  # https://github.com/golang/go/issues/17732
  sed -i -e '/^#cgo CFLAGS:/s/-D__MAC_OS_X_VERSION_MAX_ALLOWED=1060//' crypto/x509/root_cgo_darwin.go
  CGO_ENABLED=1 CC_FOR_TARGET="$CC_FOR_TARGET" CC= CFLAGS= LDFLAGS= ./make.bash
  cd ../..
  export PATH="$PATH:$PWD/go/bin"

  if [ "z$INCLUDE_FTE" = "z1" ]; then

  # Building pyptlib
  cd pyptlib
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  python setup.py build --build-lib build
  cp -a build/pyptlib $PTDIR/
  cd ..

  # Building PyCrypto
  tar xzf pycrypto.tar.gz
  cd pycrypto-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  # https://bugs.launchpad.net/pycrypto/+bug/1096207 for ac_cv_func_malloc_0_nonnull.
  ac_cv_func_malloc_0_nonnull=yes sh configure --host=i686-apple-darwin11
  LDSHARED="$LDSHARED -framework Python" python setup.py build_ext --build-lib build -I/usr/lib/apple/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/Python.framework/Headers
  python setup.py build --build-lib build
  cp -a build/Crypto $PTDIR/
  cd ..

  # Building argparse
  tar xzf argparse.tar.gz
  cd argparse-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  python setup.py build --build-lib build
  cp -a build/argparse.py $PTDIR/
  cd ..

  # Building Zope interfaces
  unzip zope.interface.zip
  cd zope.interface-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  python setup.py build --build-lib build
  cp -a build/zope $PTDIR/
  cd ..

  # Building PyYAML
  tar xzf pyyaml.tar.gz
  cd PyYAML-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  python setup.py build --build-lib build
  cp -a build/yaml $PTDIR/
  cd ..

  # Building Twisted
  tar xjf twisted.tar.bz2
  cd Twisted-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  LDSHARED="$LDSHARED -framework Python" python setup.py build_ext --build-lib build -I/usr/lib/apple/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/Python.framework/Headers
  python setup.py build --build-lib build
  cp -a build/twisted $PTDIR/
  cd ..

  # Building Parsley
  tar xzf parsley.tar.gz
  cd Parsley-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  python setup.py build --build-lib build
  cp -a build/parsley.py $PTDIR/
  cp -a build/ometa $PTDIR/
  cp -a build/terml $PTDIR/
  cd ..

  # Building txsocksx
  cd txsocksx
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  # Let's pretend we have the setup dependency already as we don't want to get
  # it downloaded during building. Just pretending and thus avoiding another
  # dependency should be fine here as txsocksx catches the exception due to
  # missing __version__ and __sha__ .
  mkdir vcversioner-1.14.1.1-py2.7.egg
  python setup.py build --build-lib build
  cp -a build/txsocksx $PTDIR/
  cd ..

  # Building obfsproxy
  cd obfsproxy
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  python setup.py build --build-lib build
  cp -a build/obfsproxy $PTDIR/
  cp -a bin/obfsproxy $PTDIR/obfsproxy.bin
  mkdir -p $DOCSDIR/Obfsproxy
  cp -a {LICENSE,README} $DOCSDIR/Obfsproxy
  # XXX: Workaround for bug 11190
  sed 's/python2/python/' -i $PTDIR/obfsproxy.bin
  cd ..

  # Building libfte
  cd libfte
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  CFLAGS="-L$INSTDIR/Tor -I$INSTDIR/gmp/include $CFLAGS" CXXFLAGS="-L$INSTDIR/Tor -I$INSTDIR/gmp/include $CXXFLAGS" make
  cp -ra fte $PTDIR/
  mkdir -p $DOCSDIR/libfte
  cp -a {LICENSE,README.md} $DOCSDIR/libfte
  cp -an thirdparty/re2/LICENSE $DOCSDIR/libfte/LICENSE.re2
  cd ..

  # Building fteproxy
  cd fteproxy
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  cp -a bin/fteproxy $PTDIR/fteproxy.bin
  cp -ra fteproxy $PTDIR/
  mkdir -p $DOCSDIR/fteproxy
  cp -a {COPYING,README.md} $DOCSDIR/fteproxy
  cd ..

  fi
  # end of 'INCLUDE_FTE' section

  # Building goptlib
  cd goptlib
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/git.torproject.org/pluggable-transports"
  ln -sf "$PWD" "$GOPATH/src/git.torproject.org/pluggable-transports/goptlib.git"
  go install git.torproject.org/pluggable-transports/goptlib.git
  cd ..

  # Building meek
  cd meek
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  cd meek-client
  # https://code.google.com/p/go/issues/detail?id=4714#c7
  # We need cgo for crypto/x509 support on mac.
  go build -ldflags '-s'
  cp -a meek-client $PTDIR
  cd ..
  cd meek-client-torbrowser
  go build -ldflags '-s'
  cp -a meek-client-torbrowser $PTDIR
  cd ..
  mkdir -p $DOCSDIR/meek
  cp -a README doc/*.1 $DOCSDIR/meek
  cd ..

  # Building go ed25519
  cd ed25519
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/agl/"
  ln -sf "$PWD" "$GOPATH/src/github.com/agl/ed25519"
  go install github.com/agl/ed25519/extra25519
  cd ..

  # Building go siphash
  cd siphash
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/dchest/"
  ln -sf "$PWD" "$GOPATH/src/github.com/dchest/siphash"
  go install github.com/dchest/siphash
  cd ..

  # Building go uniuri
  cd uniuri
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/dchest/"
  ln -sf "$PWD" "$GOPATH/src/github.com/dchest/uniuri"
  go install github.com/dchest/uniuri
  cd ..

  # Building golang.org/x/crypto (obfs4proxy > 0.0.3 || Go >= 1.4)
  cd goxcrypto
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/golang.org/x/"
  ln -sf "$PWD" "$GOPATH/src/golang.org/x/crypto"
  go install golang.org/x/crypto/curve25519
  go install golang.org/x/crypto/hkdf
  go install golang.org/x/crypto/nacl/secretbox
  cd ..

  # Building golang.org/x/net (obfs4proxy > 0.0.4)
  cd goxnet
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/golang.org/x/"
  ln -sf "$PWD" "$GOPATH/src/golang.org/x/net"
  go install golang.org/x/net/proxy
  cd ..

  # Building obfs4proxy
  cd obfs4
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/git.torproject.org/pluggable-transports"
  ln -sf "$PWD" "$GOPATH/src/git.torproject.org/pluggable-transports/obfs4.git"
  cd obfs4proxy
  go build -ldflags '-s'
  cp -a obfs4proxy $PTDIR
  cd ../..

  unzip webrtc-mac64-gbuilt.zip
  unzip clang-linux32-wheezy-utils.zip
  unzip libcxx-linux64-wheezy-utils.zip
  export PATH=$PATH:$PWD/clang/bin
  export SDKROOT="$PWD/MacOSX10.7.sdk"

  # Building go-webrtc
  cd go-webrtc
  # Replace the prebuilt webrtc library with our own one.
  rm -rf include/ lib/
  ln -sf ../webrtc/{include,lib} .
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  mkdir -p "$GOPATH/src/github.com/keroserene/"
  ln -sf "$PWD" "$GOPATH/src/github.com/keroserene/go-webrtc"
  CFLAGS="-target x86_64-apple-darwin11 -isysroot $SDKROOT -B$HOME/build/apple-osx/bin -mmacosx-version-min=10.6"
  CXXFLAGS="-stdlib=libc++ -target x86_64-apple-darwin11 -isysroot $SDKROOT -B$HOME/build/apple-osx/bin -I$HOME/build/libcxx -I$HOME/build/libcxx/include/c++/v1 -mmacosx-version-min=10.6"
  LDFLAGS="-stdlib=libc++ -target x86_64-apple-darwin11 -isysroot $SDKROOT -B$HOME/build/apple-osx/bin -mmacosx-version-min=10.6"
  # The go-webrtc package sets _GLIBCXX_USE_CXX11_ABI=0 for compatibility with
  # the prebuilt libwebrtc-magic.a libraries. Since we build our own
  # libwebrtc-magic.a with the C++11 ABI, we have to undo that setting here,
  # using CGO_CXXFLAGS.
  GOARCH=amd64 CGO_ENABLED=1 CGO_CFLAGS="$CFLAGS" CGO_CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=1 $CXXFLAGS" CGO_LDFLAGS="$LDFLAGS" CC=clang CXX=clang++ go install github.com/keroserene/go-webrtc
  cd ..

  # Building snowflake
  cd snowflake
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  cd client
  # Omit "-ldflags '-s'"; it causes an error when external linking.
  # https://github.com/golang/go/issues/10254
  # https://github.com/golang/go/issues/11994#issuecomment-154042876
  GOARCH=amd64 CGO_ENABLED=1 CGO_CFLAGS="$CFLAGS" CGO_CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=1 $CXXFLAGS" CGO_LDFLAGS="$LDFLAGS" CC=clang CXX=clang++ go build
  cp -a client $PTDIR/snowflake-client
  cd ..
  mkdir -p $INSTDIR/Docs/snowflake
  cp -a README.md LICENSE $INSTDIR/Docs/snowflake
  cd ..

  # Grabbing the result
  cd $INSTDIR
  ~/build/dzip.sh pluggable-transports-mac64-gbuilt.zip TorBrowserBundle.app
  cp pluggable-transports-mac64-gbuilt.zip $OUTDIR/
